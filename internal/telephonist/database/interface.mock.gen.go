// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -package database -mock_names IClient=ClientMock -source ./interface.go -typed -destination interface.mock.gen.go
//

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	model "github.com/famusovsky/go-rufkian/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// ClientMock is a mock of IClient interface.
type ClientMock struct {
	ctrl     *gomock.Controller
	recorder *ClientMockMockRecorder
	isgomock struct{}
}

// ClientMockMockRecorder is the mock recorder for ClientMock.
type ClientMockMockRecorder struct {
	mock *ClientMock
}

// NewClientMock creates a new mock instance.
func NewClientMock(ctrl *gomock.Controller) *ClientMock {
	mock := &ClientMock{ctrl: ctrl}
	mock.recorder = &ClientMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ClientMock) EXPECT() *ClientMockMockRecorder {
	return m.recorder
}

// StoreDialog mocks base method.
func (m *ClientMock) StoreDialog(dialog model.Dialog) (model.Dialog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreDialog", dialog)
	ret0, _ := ret[0].(model.Dialog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreDialog indicates an expected call of StoreDialog.
func (mr *ClientMockMockRecorder) StoreDialog(dialog any) *ClientMockStoreDialogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreDialog", reflect.TypeOf((*ClientMock)(nil).StoreDialog), dialog)
	return &ClientMockStoreDialogCall{Call: call}
}

// ClientMockStoreDialogCall wrap *gomock.Call
type ClientMockStoreDialogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockStoreDialogCall) Return(arg0 model.Dialog, arg1 error) *ClientMockStoreDialogCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockStoreDialogCall) Do(f func(model.Dialog) (model.Dialog, error)) *ClientMockStoreDialogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockStoreDialogCall) DoAndReturn(f func(model.Dialog) (model.Dialog, error)) *ClientMockStoreDialogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDialog mocks base method.
func (m *ClientMock) UpdateDialog(dialog model.Dialog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDialog", dialog)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDialog indicates an expected call of UpdateDialog.
func (mr *ClientMockMockRecorder) UpdateDialog(dialog any) *ClientMockUpdateDialogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDialog", reflect.TypeOf((*ClientMock)(nil).UpdateDialog), dialog)
	return &ClientMockUpdateDialogCall{Call: call}
}

// ClientMockUpdateDialogCall wrap *gomock.Call
type ClientMockUpdateDialogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockUpdateDialogCall) Return(arg0 error) *ClientMockUpdateDialogCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockUpdateDialogCall) Do(f func(model.Dialog) error) *ClientMockUpdateDialogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockUpdateDialogCall) DoAndReturn(f func(model.Dialog) error) *ClientMockUpdateDialogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
