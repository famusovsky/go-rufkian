// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -package walkietalkie -mock_names IController=ControllerMock -source ./interface.go -typed -destination interface.mock.gen.go
//

// Package walkietalkie is a generated GoMock package.
package walkietalkie

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// ControllerMock is a mock of IController interface.
type ControllerMock struct {
	ctrl     *gomock.Controller
	recorder *ControllerMockMockRecorder
	isgomock struct{}
}

// ControllerMockMockRecorder is the mock recorder for ControllerMock.
type ControllerMockMockRecorder struct {
	mock *ControllerMock
}

// NewControllerMock creates a new mock instance.
func NewControllerMock(ctrl *gomock.Controller) *ControllerMock {
	mock := &ControllerMock{ctrl: ctrl}
	mock.recorder = &ControllerMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ControllerMock) EXPECT() *ControllerMockMockRecorder {
	return m.recorder
}

// CleanUp mocks base method.
func (m *ControllerMock) CleanUp() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanUp")
}

// CleanUp indicates an expected call of CleanUp.
func (mr *ControllerMockMockRecorder) CleanUp() *ControllerMockCleanUpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUp", reflect.TypeOf((*ControllerMock)(nil).CleanUp))
	return &ControllerMockCleanUpCall{Call: call}
}

// ControllerMockCleanUpCall wrap *gomock.Call
type ControllerMockCleanUpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ControllerMockCleanUpCall) Return() *ControllerMockCleanUpCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ControllerMockCleanUpCall) Do(f func()) *ControllerMockCleanUpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ControllerMockCleanUpCall) DoAndReturn(f func()) *ControllerMockCleanUpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *ControllerMock) Stop(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *ControllerMockMockRecorder) Stop(userID any) *ControllerMockStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*ControllerMock)(nil).Stop), userID)
	return &ControllerMockStopCall{Call: call}
}

// ControllerMockStopCall wrap *gomock.Call
type ControllerMockStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ControllerMockStopCall) Return(id string, err error) *ControllerMockStopCall {
	c.Call = c.Call.Return(id, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ControllerMockStopCall) Do(f func(string) (string, error)) *ControllerMockStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ControllerMockStopCall) DoAndReturn(f func(string) (string, error)) *ControllerMockStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Talk mocks base method.
func (m *ControllerMock) Talk(userID, key, input string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Talk", userID, key, input)
	ret0, _ := ret[0].(string)
	return ret0
}

// Talk indicates an expected call of Talk.
func (mr *ControllerMockMockRecorder) Talk(userID, key, input any) *ControllerMockTalkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Talk", reflect.TypeOf((*ControllerMock)(nil).Talk), userID, key, input)
	return &ControllerMockTalkCall{Call: call}
}

// ControllerMockTalkCall wrap *gomock.Call
type ControllerMockTalkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ControllerMockTalkCall) Return(asnwer string) *ControllerMockTalkCall {
	c.Call = c.Call.Return(asnwer)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ControllerMockTalkCall) Do(f func(string, string, string) string) *ControllerMockTalkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ControllerMockTalkCall) DoAndReturn(f func(string, string, string) string) *ControllerMockTalkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
