// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -package dictionary -mock_names IHandlers=HandlersMock -source ./interface.go -typed -destination interface.mock.gen.go
//

// Package dictionary is a generated GoMock package.
package dictionary

import (
	reflect "reflect"

	fiber "github.com/gofiber/fiber/v2"
	gomock "go.uber.org/mock/gomock"
)

// HandlersMock is a mock of IHandlers interface.
type HandlersMock struct {
	ctrl     *gomock.Controller
	recorder *HandlersMockMockRecorder
	isgomock struct{}
}

// HandlersMockMockRecorder is the mock recorder for HandlersMock.
type HandlersMockMockRecorder struct {
	mock *HandlersMock
}

// NewHandlersMock creates a new mock instance.
func NewHandlersMock(ctrl *gomock.Controller) *HandlersMock {
	mock := &HandlersMock{ctrl: ctrl}
	mock.recorder = &HandlersMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HandlersMock) EXPECT() *HandlersMockMockRecorder {
	return m.recorder
}

// AddWord mocks base method.
func (m *HandlersMock) AddWord(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWord", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWord indicates an expected call of AddWord.
func (mr *HandlersMockMockRecorder) AddWord(c any) *HandlersMockAddWordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWord", reflect.TypeOf((*HandlersMock)(nil).AddWord), c)
	return &HandlersMockAddWordCall{Call: call}
}

// HandlersMockAddWordCall wrap *gomock.Call
type HandlersMockAddWordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *HandlersMockAddWordCall) Return(arg0 error) *HandlersMockAddWordCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *HandlersMockAddWordCall) Do(f func(*fiber.Ctx) error) *HandlersMockAddWordCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *HandlersMockAddWordCall) DoAndReturn(f func(*fiber.Ctx) error) *HandlersMockAddWordCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// ApkgInstructionPage mocks base method.
func (m *HandlersMock) ApkgInstructionPage(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApkgInstructionPage", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApkgInstructionPage indicates an expected call of ApkgInstructionPage.
func (mr *HandlersMockMockRecorder) ApkgInstructionPage(c any) *HandlersMockApkgInstructionPageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApkgInstructionPage", reflect.TypeOf((*HandlersMock)(nil).ApkgInstructionPage), c)
	return &HandlersMockApkgInstructionPageCall{Call: call}
}

// HandlersMockApkgInstructionPageCall wrap *gomock.Call
type HandlersMockApkgInstructionPageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *HandlersMockApkgInstructionPageCall) Return(arg0 error) *HandlersMockApkgInstructionPageCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *HandlersMockApkgInstructionPageCall) Do(f func(*fiber.Ctx) error) *HandlersMockApkgInstructionPageCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *HandlersMockApkgInstructionPageCall) DoAndReturn(f func(*fiber.Ctx) error) *HandlersMockApkgInstructionPageCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// DeleteWord mocks base method.
func (m *HandlersMock) DeleteWord(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWord", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWord indicates an expected call of DeleteWord.
func (mr *HandlersMockMockRecorder) DeleteWord(c any) *HandlersMockDeleteWordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWord", reflect.TypeOf((*HandlersMock)(nil).DeleteWord), c)
	return &HandlersMockDeleteWordCall{Call: call}
}

// HandlersMockDeleteWordCall wrap *gomock.Call
type HandlersMockDeleteWordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *HandlersMockDeleteWordCall) Return(arg0 error) *HandlersMockDeleteWordCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *HandlersMockDeleteWordCall) Do(f func(*fiber.Ctx) error) *HandlersMockDeleteWordCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *HandlersMockDeleteWordCall) DoAndReturn(f func(*fiber.Ctx) error) *HandlersMockDeleteWordCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// DictionaryPage mocks base method.
func (m *HandlersMock) DictionaryPage(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DictionaryPage", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DictionaryPage indicates an expected call of DictionaryPage.
func (mr *HandlersMockMockRecorder) DictionaryPage(c any) *HandlersMockDictionaryPageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DictionaryPage", reflect.TypeOf((*HandlersMock)(nil).DictionaryPage), c)
	return &HandlersMockDictionaryPageCall{Call: call}
}

// HandlersMockDictionaryPageCall wrap *gomock.Call
type HandlersMockDictionaryPageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *HandlersMockDictionaryPageCall) Return(arg0 error) *HandlersMockDictionaryPageCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *HandlersMockDictionaryPageCall) Do(f func(*fiber.Ctx) error) *HandlersMockDictionaryPageCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *HandlersMockDictionaryPageCall) DoAndReturn(f func(*fiber.Ctx) error) *HandlersMockDictionaryPageCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// GetApkg mocks base method.
func (m *HandlersMock) GetApkg(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApkg", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApkg indicates an expected call of GetApkg.
func (mr *HandlersMockMockRecorder) GetApkg(c any) *HandlersMockGetApkgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApkg", reflect.TypeOf((*HandlersMock)(nil).GetApkg), c)
	return &HandlersMockGetApkgCall{Call: call}
}

// HandlersMockGetApkgCall wrap *gomock.Call
type HandlersMockGetApkgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *HandlersMockGetApkgCall) Return(arg0 error) *HandlersMockGetApkgCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *HandlersMockGetApkgCall) Do(f func(*fiber.Ctx) error) *HandlersMockGetApkgCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *HandlersMockGetApkgCall) DoAndReturn(f func(*fiber.Ctx) error) *HandlersMockGetApkgCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// WordPage mocks base method.
func (m *HandlersMock) WordPage(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WordPage", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// WordPage indicates an expected call of WordPage.
func (mr *HandlersMockMockRecorder) WordPage(c any) *HandlersMockWordPageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WordPage", reflect.TypeOf((*HandlersMock)(nil).WordPage), c)
	return &HandlersMockWordPageCall{Call: call}
}

// HandlersMockWordPageCall wrap *gomock.Call
type HandlersMockWordPageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *HandlersMockWordPageCall) Return(arg0 error) *HandlersMockWordPageCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *HandlersMockWordPageCall) Do(f func(*fiber.Ctx) error) *HandlersMockWordPageCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *HandlersMockWordPageCall) DoAndReturn(f func(*fiber.Ctx) error) *HandlersMockWordPageCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
