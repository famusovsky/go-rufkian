// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -package proxy -mock_names IHandlers=HandlersMock -source ./interface.go -typed -destination interface.mock.gen.go
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	fiber "github.com/gofiber/fiber/v2"
	gomock "go.uber.org/mock/gomock"
)

// HandlersMock is a mock of IHandlers interface.
type HandlersMock struct {
	ctrl     *gomock.Controller
	recorder *HandlersMockMockRecorder
	isgomock struct{}
}

// HandlersMockMockRecorder is the mock recorder for HandlersMock.
type HandlersMockMockRecorder struct {
	mock *HandlersMock
}

// NewHandlersMock creates a new mock instance.
func NewHandlersMock(ctrl *gomock.Controller) *HandlersMock {
	mock := &HandlersMock{ctrl: ctrl}
	mock.recorder = &HandlersMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HandlersMock) EXPECT() *HandlersMockMockRecorder {
	return m.recorder
}

// Woerter mocks base method.
func (m *HandlersMock) Woerter(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Woerter", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Woerter indicates an expected call of Woerter.
func (mr *HandlersMockMockRecorder) Woerter(c any) *HandlersMockWoerterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Woerter", reflect.TypeOf((*HandlersMock)(nil).Woerter), c)
	return &HandlersMockWoerterCall{Call: call}
}

// HandlersMockWoerterCall wrap *gomock.Call
type HandlersMockWoerterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *HandlersMockWoerterCall) Return(arg0 error) *HandlersMockWoerterCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *HandlersMockWoerterCall) Do(f func(*fiber.Ctx) error) *HandlersMockWoerterCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *HandlersMockWoerterCall) DoAndReturn(f func(*fiber.Ctx) error) *HandlersMockWoerterCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
