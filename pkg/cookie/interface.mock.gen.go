// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -package cookie -mock_names IHandler=HandlerMock,adder=adderMock,requestWithCookies=requestMock -source ./interface.go -typed -destination interface.mock.gen.go
//

// Package cookie is a generated GoMock package.
package cookie

import (
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// HandlerMock is a mock of IHandler interface.
type HandlerMock struct {
	ctrl     *gomock.Controller
	recorder *HandlerMockMockRecorder
	isgomock struct{}
}

// HandlerMockMockRecorder is the mock recorder for HandlerMock.
type HandlerMockMockRecorder struct {
	mock *HandlerMock
}

// NewHandlerMock creates a new mock instance.
func NewHandlerMock(ctrl *gomock.Controller) *HandlerMock {
	mock := &HandlerMock{ctrl: ctrl}
	mock.recorder = &HandlerMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HandlerMock) EXPECT() *HandlerMockMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *HandlerMock) Clear(a adder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", a)
}

// Clear indicates an expected call of Clear.
func (mr *HandlerMockMockRecorder) Clear(a any) *HandlerMockClearCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*HandlerMock)(nil).Clear), a)
	return &HandlerMockClearCall{Call: call}
}

// HandlerMockClearCall wrap *gomock.Call
type HandlerMockClearCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *HandlerMockClearCall) Return() *HandlerMockClearCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *HandlerMockClearCall) Do(f func(adder)) *HandlerMockClearCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *HandlerMockClearCall) DoAndReturn(f func(adder)) *HandlerMockClearCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *HandlerMock) Read(r requestWithCookies) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", r)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *HandlerMockMockRecorder) Read(r any) *HandlerMockReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*HandlerMock)(nil).Read), r)
	return &HandlerMockReadCall{Call: call}
}

// HandlerMockReadCall wrap *gomock.Call
type HandlerMockReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *HandlerMockReadCall) Return(arg0 map[string]string, arg1 error) *HandlerMockReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *HandlerMockReadCall) Do(f func(requestWithCookies) (map[string]string, error)) *HandlerMockReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *HandlerMockReadCall) DoAndReturn(f func(requestWithCookies) (map[string]string, error)) *HandlerMockReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *HandlerMock) Set(a adder, expireDate time.Time, keyValue ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{a, expireDate}
	for _, a_2 := range keyValue {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *HandlerMockMockRecorder) Set(a, expireDate any, keyValue ...any) *HandlerMockSetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{a, expireDate}, keyValue...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*HandlerMock)(nil).Set), varargs...)
	return &HandlerMockSetCall{Call: call}
}

// HandlerMockSetCall wrap *gomock.Call
type HandlerMockSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *HandlerMockSetCall) Return(arg0 error) *HandlerMockSetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *HandlerMockSetCall) Do(f func(adder, time.Time, ...string) error) *HandlerMockSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *HandlerMockSetCall) DoAndReturn(f func(adder, time.Time, ...string) error) *HandlerMockSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// adderMock is a mock of adder interface.
type adderMock struct {
	ctrl     *gomock.Controller
	recorder *adderMockMockRecorder
	isgomock struct{}
}

// adderMockMockRecorder is the mock recorder for adderMock.
type adderMockMockRecorder struct {
	mock *adderMock
}

// NewadderMock creates a new mock instance.
func NewadderMock(ctrl *gomock.Controller) *adderMock {
	mock := &adderMock{ctrl: ctrl}
	mock.recorder = &adderMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *adderMock) EXPECT() *adderMockMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *adderMock) Add(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", key, value)
}

// Add indicates an expected call of Add.
func (mr *adderMockMockRecorder) Add(key, value any) *adderMockAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*adderMock)(nil).Add), key, value)
	return &adderMockAddCall{Call: call}
}

// adderMockAddCall wrap *gomock.Call
type adderMockAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *adderMockAddCall) Return() *adderMockAddCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *adderMockAddCall) Do(f func(string, string)) *adderMockAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *adderMockAddCall) DoAndReturn(f func(string, string)) *adderMockAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// requestMock is a mock of requestWithCookies interface.
type requestMock struct {
	ctrl     *gomock.Controller
	recorder *requestMockMockRecorder
	isgomock struct{}
}

// requestMockMockRecorder is the mock recorder for requestMock.
type requestMockMockRecorder struct {
	mock *requestMock
}

// NewrequestMock creates a new mock instance.
func NewrequestMock(ctrl *gomock.Controller) *requestMock {
	mock := &requestMock{ctrl: ctrl}
	mock.recorder = &requestMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *requestMock) EXPECT() *requestMockMockRecorder {
	return m.recorder
}

// Cookie mocks base method.
func (m *requestMock) Cookie(name string) (*http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cookie", name)
	ret0, _ := ret[0].(*http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cookie indicates an expected call of Cookie.
func (mr *requestMockMockRecorder) Cookie(name any) *requestMockCookieCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookie", reflect.TypeOf((*requestMock)(nil).Cookie), name)
	return &requestMockCookieCall{Call: call}
}

// requestMockCookieCall wrap *gomock.Call
type requestMockCookieCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *requestMockCookieCall) Return(arg0 *http.Cookie, arg1 error) *requestMockCookieCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *requestMockCookieCall) Do(f func(string) (*http.Cookie, error)) *requestMockCookieCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *requestMockCookieCall) DoAndReturn(f func(string) (*http.Cookie, error)) *requestMockCookieCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
