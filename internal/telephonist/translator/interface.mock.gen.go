// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -package translator -mock_names IClient=ClientMock -source ./interface.go -typed -destination interface.mock.gen.go
//

// Package translator is a generated GoMock package.
package translator

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// ClientMock is a mock of IClient interface.
type ClientMock struct {
	ctrl     *gomock.Controller
	recorder *ClientMockMockRecorder
	isgomock struct{}
}

// ClientMockMockRecorder is the mock recorder for ClientMock.
type ClientMockMockRecorder struct {
	mock *ClientMock
}

// NewClientMock creates a new mock instance.
func NewClientMock(ctrl *gomock.Controller) *ClientMock {
	mock := &ClientMock{ctrl: ctrl}
	mock.recorder = &ClientMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ClientMock) EXPECT() *ClientMockMockRecorder {
	return m.recorder
}

// Translate mocks base method.
func (m *ClientMock) Translate(texts []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", texts)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *ClientMockMockRecorder) Translate(texts any) *ClientMockTranslateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*ClientMock)(nil).Translate), texts)
	return &ClientMockTranslateCall{Call: call}
}

// ClientMockTranslateCall wrap *gomock.Call
type ClientMockTranslateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockTranslateCall) Return(arg0 []string, arg1 error) *ClientMockTranslateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockTranslateCall) Do(f func([]string) ([]string, error)) *ClientMockTranslateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockTranslateCall) DoAndReturn(f func([]string) ([]string, error)) *ClientMockTranslateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
