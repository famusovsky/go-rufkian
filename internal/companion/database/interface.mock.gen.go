// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -package database -mock_names IClient=ClientMock -source ./interface.go -typed -destination interface.mock.gen.go
//

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	model "github.com/famusovsky/go-rufkian/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// ClientMock is a mock of IClient interface.
type ClientMock struct {
	ctrl     *gomock.Controller
	recorder *ClientMockMockRecorder
	isgomock struct{}
}

// ClientMockMockRecorder is the mock recorder for ClientMock.
type ClientMockMockRecorder struct {
	mock *ClientMock
}

// NewClientMock creates a new mock instance.
func NewClientMock(ctrl *gomock.Controller) *ClientMock {
	mock := &ClientMock{ctrl: ctrl}
	mock.recorder = &ClientMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ClientMock) EXPECT() *ClientMockMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *ClientMock) AddUser(user model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *ClientMockMockRecorder) AddUser(user any) *ClientMockAddUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*ClientMock)(nil).AddUser), user)
	return &ClientMockAddUserCall{Call: call}
}

// ClientMockAddUserCall wrap *gomock.Call
type ClientMockAddUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockAddUserCall) Return(arg0 model.User, arg1 error) *ClientMockAddUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockAddUserCall) Do(f func(model.User) (model.User, error)) *ClientMockAddUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockAddUserCall) DoAndReturn(f func(model.User) (model.User, error)) *ClientMockAddUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddWord mocks base method.
func (m *ClientMock) AddWord(word, info, translation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWord", word, info, translation)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWord indicates an expected call of AddWord.
func (mr *ClientMockMockRecorder) AddWord(word, info, translation any) *ClientMockAddWordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWord", reflect.TypeOf((*ClientMock)(nil).AddWord), word, info, translation)
	return &ClientMockAddWordCall{Call: call}
}

// ClientMockAddWordCall wrap *gomock.Call
type ClientMockAddWordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockAddWordCall) Return(arg0 error) *ClientMockAddWordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockAddWordCall) Do(f func(string, string, string) error) *ClientMockAddWordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockAddWordCall) DoAndReturn(f func(string, string, string) error) *ClientMockAddWordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddWordToUser mocks base method.
func (m *ClientMock) AddWordToUser(userID, word string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWordToUser", userID, word)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWordToUser indicates an expected call of AddWordToUser.
func (mr *ClientMockMockRecorder) AddWordToUser(userID, word any) *ClientMockAddWordToUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWordToUser", reflect.TypeOf((*ClientMock)(nil).AddWordToUser), userID, word)
	return &ClientMockAddWordToUserCall{Call: call}
}

// ClientMockAddWordToUserCall wrap *gomock.Call
type ClientMockAddWordToUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockAddWordToUserCall) Return(arg0 error) *ClientMockAddWordToUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockAddWordToUserCall) Do(f func(string, string) error) *ClientMockAddWordToUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockAddWordToUserCall) DoAndReturn(f func(string, string) error) *ClientMockAddWordToUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckDictionaryNeedUpdate mocks base method.
func (m *ClientMock) CheckDictionaryNeedUpdate(userID, hash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDictionaryNeedUpdate", userID, hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDictionaryNeedUpdate indicates an expected call of CheckDictionaryNeedUpdate.
func (mr *ClientMockMockRecorder) CheckDictionaryNeedUpdate(userID, hash any) *ClientMockCheckDictionaryNeedUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDictionaryNeedUpdate", reflect.TypeOf((*ClientMock)(nil).CheckDictionaryNeedUpdate), userID, hash)
	return &ClientMockCheckDictionaryNeedUpdateCall{Call: call}
}

// ClientMockCheckDictionaryNeedUpdateCall wrap *gomock.Call
type ClientMockCheckDictionaryNeedUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockCheckDictionaryNeedUpdateCall) Return(arg0 bool, arg1 error) *ClientMockCheckDictionaryNeedUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockCheckDictionaryNeedUpdateCall) Do(f func(string, string) (bool, error)) *ClientMockCheckDictionaryNeedUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockCheckDictionaryNeedUpdateCall) DoAndReturn(f func(string, string) (bool, error)) *ClientMockCheckDictionaryNeedUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckUserWord mocks base method.
func (m *ClientMock) CheckUserWord(userID, word string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserWord", userID, word)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserWord indicates an expected call of CheckUserWord.
func (mr *ClientMockMockRecorder) CheckUserWord(userID, word any) *ClientMockCheckUserWordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserWord", reflect.TypeOf((*ClientMock)(nil).CheckUserWord), userID, word)
	return &ClientMockCheckUserWordCall{Call: call}
}

// ClientMockCheckUserWordCall wrap *gomock.Call
type ClientMockCheckUserWordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockCheckUserWordCall) Return(arg0 bool, arg1 error) *ClientMockCheckUserWordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockCheckUserWordCall) Do(f func(string, string) (bool, error)) *ClientMockCheckUserWordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockCheckUserWordCall) DoAndReturn(f func(string, string) (bool, error)) *ClientMockCheckUserWordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteWordFromUser mocks base method.
func (m *ClientMock) DeleteWordFromUser(userID, word string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWordFromUser", userID, word)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWordFromUser indicates an expected call of DeleteWordFromUser.
func (mr *ClientMockMockRecorder) DeleteWordFromUser(userID, word any) *ClientMockDeleteWordFromUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWordFromUser", reflect.TypeOf((*ClientMock)(nil).DeleteWordFromUser), userID, word)
	return &ClientMockDeleteWordFromUserCall{Call: call}
}

// ClientMockDeleteWordFromUserCall wrap *gomock.Call
type ClientMockDeleteWordFromUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockDeleteWordFromUserCall) Return(arg0 error) *ClientMockDeleteWordFromUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockDeleteWordFromUserCall) Do(f func(string, string) error) *ClientMockDeleteWordFromUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockDeleteWordFromUserCall) DoAndReturn(f func(string, string) error) *ClientMockDeleteWordFromUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDialog mocks base method.
func (m *ClientMock) GetDialog(id, userID string) (model.Dialog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDialog", id, userID)
	ret0, _ := ret[0].(model.Dialog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDialog indicates an expected call of GetDialog.
func (mr *ClientMockMockRecorder) GetDialog(id, userID any) *ClientMockGetDialogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDialog", reflect.TypeOf((*ClientMock)(nil).GetDialog), id, userID)
	return &ClientMockGetDialogCall{Call: call}
}

// ClientMockGetDialogCall wrap *gomock.Call
type ClientMockGetDialogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockGetDialogCall) Return(arg0 model.Dialog, arg1 error) *ClientMockGetDialogCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockGetDialogCall) Do(f func(string, string) (model.Dialog, error)) *ClientMockGetDialogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockGetDialogCall) DoAndReturn(f func(string, string) (model.Dialog, error)) *ClientMockGetDialogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDictionary mocks base method.
func (m *ClientMock) GetDictionary(userID string) (model.Dictionary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDictionary", userID)
	ret0, _ := ret[0].(model.Dictionary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDictionary indicates an expected call of GetDictionary.
func (mr *ClientMockMockRecorder) GetDictionary(userID any) *ClientMockGetDictionaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDictionary", reflect.TypeOf((*ClientMock)(nil).GetDictionary), userID)
	return &ClientMockGetDictionaryCall{Call: call}
}

// ClientMockGetDictionaryCall wrap *gomock.Call
type ClientMockGetDictionaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockGetDictionaryCall) Return(arg0 model.Dictionary, arg1 error) *ClientMockGetDictionaryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockGetDictionaryCall) Do(f func(string) (model.Dictionary, error)) *ClientMockGetDictionaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockGetDictionaryCall) DoAndReturn(f func(string) (model.Dictionary, error)) *ClientMockGetDictionaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *ClientMock) GetUser(id string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *ClientMockMockRecorder) GetUser(id any) *ClientMockGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*ClientMock)(nil).GetUser), id)
	return &ClientMockGetUserCall{Call: call}
}

// ClientMockGetUserCall wrap *gomock.Call
type ClientMockGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockGetUserCall) Return(arg0 model.User, arg1 error) *ClientMockGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockGetUserCall) Do(f func(string) (model.User, error)) *ClientMockGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockGetUserCall) DoAndReturn(f func(string) (model.User, error)) *ClientMockGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByCredentials mocks base method.
func (m *ClientMock) GetUserByCredentials(user model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByCredentials", user)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByCredentials indicates an expected call of GetUserByCredentials.
func (mr *ClientMockMockRecorder) GetUserByCredentials(user any) *ClientMockGetUserByCredentialsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByCredentials", reflect.TypeOf((*ClientMock)(nil).GetUserByCredentials), user)
	return &ClientMockGetUserByCredentialsCall{Call: call}
}

// ClientMockGetUserByCredentialsCall wrap *gomock.Call
type ClientMockGetUserByCredentialsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockGetUserByCredentialsCall) Return(arg0 model.User, arg1 error) *ClientMockGetUserByCredentialsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockGetUserByCredentialsCall) Do(f func(model.User) (model.User, error)) *ClientMockGetUserByCredentialsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockGetUserByCredentialsCall) DoAndReturn(f func(model.User) (model.User, error)) *ClientMockGetUserByCredentialsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserDialogs mocks base method.
func (m *ClientMock) GetUserDialogs(userID string) (model.Dialogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDialogs", userID)
	ret0, _ := ret[0].(model.Dialogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDialogs indicates an expected call of GetUserDialogs.
func (mr *ClientMockMockRecorder) GetUserDialogs(userID any) *ClientMockGetUserDialogsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDialogs", reflect.TypeOf((*ClientMock)(nil).GetUserDialogs), userID)
	return &ClientMockGetUserDialogsCall{Call: call}
}

// ClientMockGetUserDialogsCall wrap *gomock.Call
type ClientMockGetUserDialogsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockGetUserDialogsCall) Return(arg0 model.Dialogs, arg1 error) *ClientMockGetUserDialogsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockGetUserDialogsCall) Do(f func(string) (model.Dialogs, error)) *ClientMockGetUserDialogsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockGetUserDialogsCall) DoAndReturn(f func(string) (model.Dialogs, error)) *ClientMockGetUserDialogsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserWords mocks base method.
func (m *ClientMock) GetUserWords(userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWords", userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWords indicates an expected call of GetUserWords.
func (mr *ClientMockMockRecorder) GetUserWords(userID any) *ClientMockGetUserWordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWords", reflect.TypeOf((*ClientMock)(nil).GetUserWords), userID)
	return &ClientMockGetUserWordsCall{Call: call}
}

// ClientMockGetUserWordsCall wrap *gomock.Call
type ClientMockGetUserWordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockGetUserWordsCall) Return(arg0 []string, arg1 error) *ClientMockGetUserWordsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockGetUserWordsCall) Do(f func(string) ([]string, error)) *ClientMockGetUserWordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockGetUserWordsCall) DoAndReturn(f func(string) ([]string, error)) *ClientMockGetUserWordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWordInfoAndTranslation mocks base method.
func (m *ClientMock) GetWordInfoAndTranslation(word string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWordInfoAndTranslation", word)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWordInfoAndTranslation indicates an expected call of GetWordInfoAndTranslation.
func (mr *ClientMockMockRecorder) GetWordInfoAndTranslation(word any) *ClientMockGetWordInfoAndTranslationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWordInfoAndTranslation", reflect.TypeOf((*ClientMock)(nil).GetWordInfoAndTranslation), word)
	return &ClientMockGetWordInfoAndTranslationCall{Call: call}
}

// ClientMockGetWordInfoAndTranslationCall wrap *gomock.Call
type ClientMockGetWordInfoAndTranslationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockGetWordInfoAndTranslationCall) Return(arg0, arg1 string, arg2 error) *ClientMockGetWordInfoAndTranslationCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockGetWordInfoAndTranslationCall) Do(f func(string) (string, string, error)) *ClientMockGetWordInfoAndTranslationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockGetWordInfoAndTranslationCall) DoAndReturn(f func(string) (string, string, error)) *ClientMockGetWordInfoAndTranslationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDictionary mocks base method.
func (m *ClientMock) UpdateDictionary(dictionary model.Dictionary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDictionary", dictionary)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDictionary indicates an expected call of UpdateDictionary.
func (mr *ClientMockMockRecorder) UpdateDictionary(dictionary any) *ClientMockUpdateDictionaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDictionary", reflect.TypeOf((*ClientMock)(nil).UpdateDictionary), dictionary)
	return &ClientMockUpdateDictionaryCall{Call: call}
}

// ClientMockUpdateDictionaryCall wrap *gomock.Call
type ClientMockUpdateDictionaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockUpdateDictionaryCall) Return(arg0 error) *ClientMockUpdateDictionaryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockUpdateDictionaryCall) Do(f func(model.Dictionary) error) *ClientMockUpdateDictionaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockUpdateDictionaryCall) DoAndReturn(f func(model.Dictionary) error) *ClientMockUpdateDictionaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUser mocks base method.
func (m *ClientMock) UpdateUser(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *ClientMockMockRecorder) UpdateUser(user any) *ClientMockUpdateUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*ClientMock)(nil).UpdateUser), user)
	return &ClientMockUpdateUserCall{Call: call}
}

// ClientMockUpdateUserCall wrap *gomock.Call
type ClientMockUpdateUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ClientMockUpdateUserCall) Return(arg0 error) *ClientMockUpdateUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ClientMockUpdateUserCall) Do(f func(model.User) error) *ClientMockUpdateUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ClientMockUpdateUserCall) DoAndReturn(f func(model.User) error) *ClientMockUpdateUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
